#dnf module disable nodejs -y
#dnf module enable nodejs:18 -y
- name: enable nodejs-18
  ansible.builtin.shell: dnf module disable nodejs -y ; dnf module enable nodejs:18 -y

- name: Install nodejs-18
  ansible.builtin.dnf:
    name: nodejs
    state: present

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: remove /app directory
  ansible.builtin.file:
    path: /app
    state: absent

- name: create /app directory
  ansible.builtin.file:
    path: /app
    state: directory

- name: Download application code
  ansible.builtin.get_url:
    url: https://expense-artifacts.s3.amazonaws.com/backend.zip
    dest: /tmp/backend.zip

- name: Unzip application code
  ansible.builtin.unarchive:
    src: /tmp/backend.zip
    dest: /app
    remote_src: yes

- name: npm install
  ansible.builtin.shell:
    cmd: npm install
    chdir: /app

# if file is copied and task status is changed, then it notifies handler : Restart backend.service in handlers -> main.yml
- name: copy backend.service
  ansible.builtin.copy:
    src: backend.service
    dest: /etc/systemd/system/backend.service
  notify:
    - Restart backend.service

- name: install mysql
  ansible.builtin.dnf:
    name: mysql
    state: present

- name: load schema
  ansible.builtin.shell: mysql -h "{{ lookup('amazon.aws.aws_ssm', 'DB_HOST', region='us-east-1' ) }}" -uroot -p{{ MYSQL_ROOT_PASSWORD }} < /app/schema/backend.sql
  tags:
    - schema

- name: start backend.service
  ansible.builtin.systemd_service:
    name: backend
    daemon_reload: true #daemon-reload to be done to reload systemd files
    enabled: true
    state: started
  tags:
      - start

#steps to move logs generated by backend.service from /var/log/messages to /var/log/backend.log using rsyslog service

- name: create file to store logs
  ansible.builtin.file:
    path: "{{log_file}}"
    state: touch

- name: copy rsyslog conf file
  ansible.builtin.template:
    src: rsyslog.conf
    dest: /etc/rsyslog.d/rsyslog.conf
  notify: Restart rsyslog service

#install beats
- name: Install filebeat
  ansible.builtin.import_role:
    name: ELK

- name: copy backend alerts file to backend server to be get recognized by s3 module src attribute
  ansible.builtin.template:
    src: "{{component}}-alerts.yml"
    dest: /tmp/{{component}}-alerts.yml
  tags: s3

- name: upload alerts file to s3
  amazon.aws.s3_object:
    bucket: prometheusalerts
    object: "{{component}}-alerts.yml"
    src: /tmp/{{component}}-alerts.yml
    mode: put
  tags: s3

#Below lines are temporarily commented for testing purpose, to be uncommented while deploying apps
#- name: Run prometheus playbook from jenkins to get files from S3 and reload prometheus
#  ansible.builtin.shell: curl -u {{ lookup('amazon.aws.aws_ssm', 'jenkins-user', region='us-east-1' ) }}:{{ lookup('amazon.aws.aws_ssm', 'jenkins-password', region='us-east-1' ) }} http://172.31.38.80:8080/job/prometheus-s3-get/build?token=prometheus
#  tags: jenkins